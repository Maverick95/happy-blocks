Aim of this project is to create a Tetris knock-off using web components.

Beginning notes - (as there will be a lot to do)

KEY POINT - could you make this cumulative, i.e. parts will move downwards as
far as possible in their column space?
This btw isn't the behaviour in standard Tetris, everything just moves down by 1.

At start-up, choose a random piece from the list of pieces allowed.
This is the 'next' piece.
At points, a new piece is required.
When this happens, 
a) return the piece in the 'next' place,
b) generate a new random piece, and put this in the 'next' place.

The score.
This will need resetting on game start, incrementing by a value whenever rows are
removed.

Playing the game
There are a maximum of 5 controls in the game,
left
right
down
spin left
spin right

Remember learnings from React, truth flows downward.
i.e. information is stored in the main Game class, the happy-blocks component.
So the solution would be to move common logic down to a happyblocks general object,
as you did before with the chess stuff.
Well it's either modules, node, or this. And modules aren't allowed if you are using local
files. And you don't want to use node and webpack etc.
Yeah so I guess you're moving towards a shared module.

This is a weird combination of technologies that I haven't used before.
Maybe I've not quite done it in the right way... but we'll see how it fares for now.
I think its okay so long as you don't keep the functionality that coupled.
i.e. using the global space as a data silo or as a game management centre is BAAAD.
In my head, I know what I am thinking, probably somebody else would be able to say it better in words.
The happyblocks global object is like a SERVICE.
For example, in your rotate method, this didn't alter the input objects, it just returned a result.

TODO : add loads of tests for moveBlock! and randomizer!
TODO : something something clear Intervals when web components detached

To get thinnest slice, need to...


## 25/06/2022
Goal for this sesh -
c) Complete rows mean rows disappear with cool animation, adjusts overall score.





It has limitations, mind. But it is some sort of complete Tetris-like solution.

TODO : add test for getBlockOffsetWithNoOverlap, createBlock, CoordinateGenerators

c) Complete rows mean rows disappear with cool animation, adjusts overall score.

b)
This may be the fiddliest one.
Also because it feeds into another idea that I'm yet to incorporate.
Currently all the game loops are the same interval apart.
I think instead, you need to set a timeout for the next event loop?
What needs to happen when rows are deleted?
We need to trigger the delete animation, and the delete steps.
There are a few ways to handle the delete animation, and a few good ideas for display.
First, I think I should go with for now, is the classic old style "flashing bars" approach,
followed by the rows disappearing, and the above rows moving downwards slowly.
There's a fairly good way to simulate this that I didn't consider yet.
When pieces land, attach a class for css that sets transition for top.
Then when the rows are removed, and the other rows move down, it will animate!

2) rearrange functionality so that timeouts instead of intervals are used to set next game loop,
this means you can add delays, etc.
