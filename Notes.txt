Aim of this project is to create a Tetris knock-off using web components.

Beginning notes - (as there will be a lot to do)

Remember learnings from React, truth flows downward.
i.e. information is stored in the main Game class, the happy-blocks component.
So the solution would be to move common logic down to a happyblocks general object,
as you did before with the chess stuff.
Well it's either modules, node, or this. And modules aren't allowed if you are using local
files. And you don't want to use node and webpack etc.
Yeah so I guess you're moving towards a shared module.

This is a weird combination of technologies that I haven't used before.
Maybe I've not quite done it in the right way... but we'll see how it fares for now.
I think its okay so long as you don't keep the functionality that coupled.
i.e. using the global space as a data silo or as a game management centre is BAAAD.
In my head, I know what I am thinking, probably somebody else would be able to say it better in words.
The happyblocks global object is like a SERVICE.
For example, in your rotate method, this didn't alter the input objects, it just returned a result.

TODO : add loads of tests for moveBlock! and randomizer!
TODO : something something clear Intervals when web components detached and timeouts

It has limitations, mind. But it is some sort of complete Tetris-like solution.

TODO : add test for getBlockOffsetWithNoOverlap, createBlock, CoordinateGenerators

TODO - move dedupe numeric array to helper?

What's next?

1) The Next Piece component. And how this piece will operate, will it be separate
from the game-grid? Or a sub-component?
