Aim of this project is to create a Tetris knock-off using web components.

Beginning notes - (as there will be a lot to do)

Remember learnings from React, truth flows downward.
i.e. information is stored in the main Game class, the happy-blocks component.
So the solution would be to move common logic down to a happyblocks general object,
as you did before with the chess stuff.
Well it's either modules, node, or this. And modules aren't allowed if you are using local
files. And you don't want to use node and webpack etc.
Yeah so I guess you're moving towards a shared module.

This is a weird combination of technologies that I haven't used before.
Maybe I've not quite done it in the right way... but we'll see how it fares for now.
I think its okay so long as you don't keep the functionality that coupled.
i.e. using the global space as a data silo or as a game management centre is BAAAD.
In my head, I know what I am thinking, probably somebody else would be able to say it better in words.
The happyblocks global object is like a SERVICE.
For example, in your rotate method, this didn't alter the input objects, it just returned a result.

TODO : add loads of tests for moveBlock! and randomizer!
TODO : something something clear Intervals when web components detached and timeouts

It has limitations, mind. But it is some sort of complete Tetris-like solution.

TODO : add test for getBlockOffsetWithNoOverlap, createBlock, CoordinateGenerators

TODO - move dedupe numeric array to helper?

What's next?

1) The Next Piece component. 

I think you need max-width, max-height, but also, some measure of what the smallest x/y are.
So you can convert coordinates into relative x/y for your display.

Take a break. Need to break down how to tackle this component in more detail later.

How will this be displayed? Should there realistically be a maximum?

No I don't think there should be a maximum.

In which case, you have a flexible-size container?

I would stick with the "conveyor belt" option to be honest.

Just because a game component tells you to do something, doesn't mean you have to do it.

For example, there will be 10 pieces generated, but that doesn't mean you have to display them all.

Look just keep it simple for now.

Work off the attribute you are given.

Unfortunately grid properties aren't animatable. Even if you added/removed elements, the movement wouldn't flow
and be pretty.
Therefore you'll have to go with top/left? Yup.

So, how to start this?

By default, create a container element with the correct width.

Then have this respond to the new attribute by changing it's width. Make this animatable.

Now we just have to display the tetrominos.

You see, part of me understands why you went with the idea of firing more events.
But then you'd have to somehow translate these events into attributes to give to the wc.
So no.
The simple answer to this is that controlling something through attributes alone
is a poor way of handling it.

The next session should be fairly easy. Just a matter of checking old to new, 

Let's put this to bed now.






Picking this back up again after an extended period of rest.

I wanted to separate out a lot of computational elements from the display elements.

Does it make sense for the game computations to be tied to the game grid display?

Depends what it is responsible for really.

Yeah I think it makes sense for parts of it.

This will be an interesting task. There's a lot to do!

The biggest questions to answer really are...

1) How the graphics part connects to the game management part
(a.k.a. attribute changes, connection, disconnection)
Can you interface the game management part?
What doth a javascript interface?
Nope, and if you thought about it for a moment, you'd realise you can't do it.
This is JAVASCRIPT!

It would connect straight through a private member variable.

2) How the game management part communicates with the graphics part
My idea was to have the game management part hold a reference to an HTML element,
and fire events at it.
WHY this way?
a) The game management can communicate more than the graphics part chooses to handle.
b) Less strict direct coupling.
Give it a try why not.

What does this.intervals do?

gameevent
moveleft
moveright

The game brain should contain the intervals objects, and the methods that respond to them.
this.moveBlock('left' | 'right')
This means as well the game brain should be hooked up to the key inputs on construction / destruction.
Hmm Javascript doesn't have destructors.
So you'll have to have separate methods to hook up / disconnect from the events?
Hmm. Basically yes.
This might not be a bad thing. You can call these methods via the connect / disconnect
callbacks from the html element.
This does directly bind the html to the game brain 1-1 though.
So the html connecting / disconnecting indicates the events are hooked up. Needs to be the same.
Once all of the attributes are set correctly, the game begins.
So actually... the event hook-ups should happen here as well?
Yeah it's more like a "begin-game" method.
So all of the attribute-changed events should pass on the logic to the game brain.
A lot of the code will just be copied-and-pasted.

Okay, so each game MUST only begin and end once.
That's fine. So connect the attribute logic.

New feature?

I think we're at the point to begin thinking about the bigger picture of the game.

The game event flow in total.

Like what?

There are a lot of things you could do, BUT you definitely need to think about
the overall manager of the app.

I like the idea of a Center (brain) for a component that separates the logic
from the graphical implementation.
The only boilerplate is that the event setup needs doing.

Settings - customization for the game as a whole.

You can't establish anything until you have an entire event flow.

What is the simplest event flow?

1) Game begins.
2) On game over, button appears to say "Play Again?" (also maybe displays your score / leaderboard etc.)

This is just 2 states, GamePlaying and GameOver.

Remember the idea of Brain vs Display.

The happy-blocks master web component has no attributes! It is the complete game.
Everything is managed within here.

This happy-blocks master needs to therefore only respond to events coming up from below?
Duh, this will always be the case.

Any event that comes up from below needs passing on to the Brain as is!
Couple the brain and display as little as possible. So just pass the event on.
NOTE - tbh I would also do this with attribute changes. Just pass it on.

How does the whole thing begin?
Well, how did you do this in the game grid?
I remember, once an attribute changed, the game brain detected it had everything it required
and began the game.
This is different because technically there is nothing to tell it to start. No attribute changes etc.
So, at what point does it have everything it needs?

As soon as it is created. But this is in the constructor.

You don't want to interfere with the web component lifecycle.

Well then. Don't.

If there are no attributes, then kick off on connection.

Remember the distinction between EVENTS and COMMANDS.

An event is SOMETHING HAPPENED. A command is DO SOMETHING.

Where in a web component should you add event listeners?

I think when connected? So then on disconnect you can remove them.

